=======================
 Tutorial Introduction
=======================

This introduction will go through how to retrieve device information, construct
physical addresses, issue vectorized IO, retrieve and mange media state, and
introduce the virtual block abstraction.

It will be using the command-line interface (CLI), and provide notes for the
corresponding parts of the C API. It is assumed throughout that an Open-Channel
SSD available at the path ``/dev/nvme0n1`` and that liblightnvm is installed on
the system.

To begin with, knowing the physical geometry of a device is essential for
working with physical addressing.

Obtaining device information
============================

Device information is obtained by invoking::

  nvm_dev info /dev/nvme0n1

Which will yield device information as shown below::

  dev {
   verid(0x02), beid(0x01),
   path(/dev/nvme0n1), name(nvme0n1), fd(3),
   ssw(12), pmode(1),
   erase_naddrs_max(64), read_naddrs_max(64), write_naddrs_max(64),
   meta_mode(0),
   bbts_cached(0)
  },
  dev-geo {
   nchannels(16), nluns(8), nplanes(2),
   nblocks(1020), npages(512), nsectors(4),
   page_nbytes(16384), sector_nbytes(4096), meta_nbytes(16),
   tbytes(2190433320960b:2088960Mb),
  }
  dev-ppaf {
    ch_off(25),  ch_len(04),
   lun_off(22), lun_len(03),
    pl_off(02),  pl_len(01),
   blk_off(12), blk_len(10),
    pg_off(03),  pg_len(09),
   sec_off(00), sec_len(02),
  }
  dev-ppaf_mask {
    ch(0000000000000000000000000000000000011110000000000000000000000000),
   lun(0000000000000000000000000000000000000001110000000000000000000000),
    pl(0000000000000000000000000000000000000000000000000000000000000100),
   blk(0000000000000000000000000000000000000000001111111111000000000000),
    pg(0000000000000000000000000000000000000000000000000000111111111000),
   sec(0000000000000000000000000000000000000000000000000000000000000011)
  }

The parts involved from the C API are: ``nvm_dev_open`` to obtain a device
handle, ``nvm_dev_pr`` to produce the output above, and lastly
``nvm_dev_close`` to terminate the handle properly.

When using the C API, values and structures are retrieved using the attribute
getters ``nvm_dev_get_*`` e.g. use ``nvm_dev_get_geo`` to obtain the geometry
of a given device.

Physical Addressing
===================

Most of the library takes one or more physical addresses as parameter.

Generic format
--------------

The physical addresses are represented in generic format by the data-structure
``struct nvm_addr``. One can construct an address by specifying the relative
location within the device geometry down to the granularity of a sector.

Example: Construct an address for sector 3 within page 11 in block 200 on
plane 0 of LUN 1 in channel 4::

  nvm_addr from_geo /dev/nvme0n1 4 1 0 200 10 3

Yielding::

  (0x04010003000a00c8){ ch(04), lun(01), pl(0), blk(0200), pg(010), sec(3) }

The above hexidecimal-value can be given to any CLI command taking an ``addr``
as parameter.

.. NOTE:: Addresses are zero-indexed, so channel 4 is the fifth channel

.. NOTE:: C API address construction is done by assigning the members of ``struct nvm_addr``

Device format
-------------

As the output from the device information shows, then there is a notion of a
device format. The library user need not be concerned with the device format as
the translation to device format is handled by the library for every part of
the interface with the exception of the low-level command-interface
``nvm_cmd``.

However, if one needs an address on device format for ``nvm_cmd`` or another
tool such as ``nvme-cli``, then the generic-format can be converted to
device format using::

  nvm_addr gen2dev /dev/nvme0n1 0x04010003000a00c8

Yielding::

  gen-addr(0x04010003000a00c8){ ch(04), lun(01), pl(0), blk(0200), pg(010), sec(3) }
  dev-addr(0x00000000084c8053)

.. NOTE:: C API address format conversion is done using ``nvm_addr_gen2dev``

Address scope
-------------

An address specifies the relative location of all parts of the geometry,
channel, lun, plane, block, page and sector. However, not all parts of the
library uses all location information. Most common uses are:

LUN address
  Specify channel and LUN within the channel

Block address
  Specify channel, LUN within the channel, plane within the LUN, and block
  within the plane

Sector address
  Specify all relative locations of the geometry

Vectorized IO to NAND media
===========================

With the basics of obtaining device information and constructing addresses in
place one can dive into the task of constructing commands for doing vectorized
IO.

As the section on background information describes, then there are handful of
constraints to handle for IOs to NAND media to succeed.

Erase before write
------------------

The first constraint to handle is that a block must be **erased** before it can be
**written**. We do so by constructing block-addresses for all blocks within a plane::

    nvm_addr from_geo 0 0 0 10 0 0
    nvm_addr from_geo 0 0 1 10 0 0

Yielding::

    (0x000000000000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(0) }
    (0x000001000000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(0) }

With the addresses we can now construct a single command with two addresses and
send of the erase::

    nvm_addr erase /dev/nvme0n1 0x000000000000000a 0x000001000000000a

On success, yielding::

    ** nvm_addr_erase(...) : pmode(0x1)
    (0x000000000000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(0) }
    (0x000001000000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(0) }

On error, yielding::

    ** nvm_addr_erase(...) : pmode(0x1)
    (0x000000000000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(0) }
    (0x000001000000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(0) }
    nvm_addr_erase: Input/output error
    nvm_ret { result(0xff), status(3) }

If an erase fails as above then it is because a block is bad. The
bad-block-table interface (nvm_bbt) is provided to communicate and update media
state. Introduction to the bad-block-table is given in a later section.

.. NOTE:: C API for performing erases using block-adressing is done with ``nvm_addr_erase``

Write
-----

The two primary constraints for issuing writes are that they must be at the
granularity of a full flash page and contigous within a block.

For the geometry in figure X, a full flash page is four sectors of each 4096 bytes,
a command satisfying the minimum-write constraint thus contains four addresses with a payload of 16384 bytes of data. The command can constructed via the CLI as::

    nvm_addr write /dev/nvme0n1 \
    0x000000000000000a 0x000000010000000a 0x000000020000000a 0x000000030000000a

The CLI creates an arbitrary payload, so we do not concern us with the
payload at this point.

The result of the command is::

    nvm_addr_write(...) : pmode(0x1)
    (0x000000000000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(0) }
    (0x000000010000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(1) }
    (0x000000020000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(2) }
    (0x000000030000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(3) }
    nvm_addr_write: Input/output error
    nvm_ret { result(0x2), status(0) }

An unexpected write error occured, the constraints are satisfied, so what goes
wrong? The issue in this case is that the command is constructed using
plane-mode (specifically ``pmode(0x1)``).

This introduces an additional constraint that writes must be performed to
the block accross all planes. One can choose to disable the plane-mode, which is
done by setting environment var ``NVM_CLI_PMODE="0"`` or by constructing a
command satisfying the plane-mode constraint::

    nvm_addr write /dev/nvme0n1 \
    0x000000000000000a 0x000000010000000a 0x000000020000000a 0x000000030000000a
    0x000001000000000a 0x000001010000000a 0x000001020000000a 0x000001030000000a 

Yielding without error::

    ** nvm_addr_write(...) : pmode(0x1)
    (0x000000000000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(0) }
    (0x000000010000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(1) }
    (0x000000020000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(2) }
    (0x000000030000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(3) }
    (0x000001000000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(0) }
    (0x000001010000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(1) }
    (0x000001020000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(2) }
    (0x000001030000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(3) }

The plane-mode allows for multiple writes to be done in parallel across the
planes.

An improvement of round-trip-time can be obtained by increasing the amount of
work done by a single command, that is, increase the number of addresses.

There is an upper limit, write-naddrs-max,  as can be seen in figure X, and
retrieved from the device. In our case we can construct a command with 64
addresses.

Abiding to all of the above mentioned constraints a write command can be
constructed as::

    nvm_addr write /dev/nvme0n1 \
    0x000000000001000a 0x000000010001000a 0x000000020001000a 0x000000030001000a \
    0x000001000001000a 0x000001010001000a 0x000001020001000a 0x000001030001000a \
    0x000000000002000a 0x000000010002000a 0x000000020002000a 0x000000030002000a \
    0x000001000002000a 0x000001010002000a 0x000001020002000a 0x000001030002000a \
    0x000000000003000a 0x000000010003000a 0x000000020003000a 0x000000030003000a \
    0x000001000003000a 0x000001010003000a 0x000001020003000a 0x000001030003000a \
    0x000000000004000a 0x000000010004000a 0x000000020004000a 0x000000030004000a \
    0x000001000004000a 0x000001010004000a 0x000001020004000a 0x000001030004000a \
    0x000000000005000a 0x000000010005000a 0x000000020005000a 0x000000030005000a \
    0x000001000005000a 0x000001010005000a 0x000001020005000a 0x000001030005000a \
    0x000000000006000a 0x000000010006000a 0x000000020006000a 0x000000030006000a \
    0x000001000006000a 0x000001010006000a 0x000001020006000a 0x000001030006000a \
    0x000000000007000a 0x000000010007000a 0x000000020007000a 0x000000030007000a \
    0x000001000007000a 0x000001010007000a 0x000001020007000a 0x000001030007000a \
    0x000000000008000a 0x000000010008000a 0x000000020008000a 0x000000030008000a \
    0x000001000008000a 0x000001010008000a 0x000001020008000a 0x000001030008000a

Successfully yielding::

    ** nvm_addr_write(...) : pmode(0x1)
    (0x000000000001000a){ ch(00), lun(00), pl(0), blk(0010), pg(001), sec(0) }
    (0x000000010001000a){ ch(00), lun(00), pl(0), blk(0010), pg(001), sec(1) }
    (0x000000020001000a){ ch(00), lun(00), pl(0), blk(0010), pg(001), sec(2) }
    (0x000000030001000a){ ch(00), lun(00), pl(0), blk(0010), pg(001), sec(3) }
    (0x000001000001000a){ ch(00), lun(00), pl(1), blk(0010), pg(001), sec(0) }
    (0x000001010001000a){ ch(00), lun(00), pl(1), blk(0010), pg(001), sec(1) }
    (0x000001020001000a){ ch(00), lun(00), pl(1), blk(0010), pg(001), sec(2) }
    (0x000001030001000a){ ch(00), lun(00), pl(1), blk(0010), pg(001), sec(3) }
    (0x000000000002000a){ ch(00), lun(00), pl(0), blk(0010), pg(002), sec(0) }
    (0x000000010002000a){ ch(00), lun(00), pl(0), blk(0010), pg(002), sec(1) }
    (0x000000020002000a){ ch(00), lun(00), pl(0), blk(0010), pg(002), sec(2) }
    (0x000000030002000a){ ch(00), lun(00), pl(0), blk(0010), pg(002), sec(3) }
    (0x000001000002000a){ ch(00), lun(00), pl(1), blk(0010), pg(002), sec(0) }
    (0x000001010002000a){ ch(00), lun(00), pl(1), blk(0010), pg(002), sec(1) }
    (0x000001020002000a){ ch(00), lun(00), pl(1), blk(0010), pg(002), sec(2) }
    (0x000001030002000a){ ch(00), lun(00), pl(1), blk(0010), pg(002), sec(3) }
               ... output for pages 3-7 omitted for brevity ...
    (0x000000000008000a){ ch(00), lun(00), pl(0), blk(0010), pg(008), sec(0) }
    (0x000000010008000a){ ch(00), lun(00), pl(0), blk(0010), pg(008), sec(1) }
    (0x000000020008000a){ ch(00), lun(00), pl(0), blk(0010), pg(008), sec(2) }
    (0x000000030008000a){ ch(00), lun(00), pl(0), blk(0010), pg(008), sec(3) }
    (0x000001000008000a){ ch(00), lun(00), pl(1), blk(0010), pg(008), sec(0) }
    (0x000001010008000a){ ch(00), lun(00), pl(1), blk(0010), pg(008), sec(1) }
    (0x000001020008000a){ ch(00), lun(00), pl(1), blk(0010), pg(008), sec(2) }
    (0x000001030008000a){ ch(00), lun(00), pl(1), blk(0010), pg(008), sec(3) }

Using vectorized IO we have with a single command successfully written a
payload of 64 x 4096 bytes = 256 KB.

.. NOTE :: C API for performing write using vectorized IO with addressing at
    sector-level is done using ``nvm_addr_write``, note that the payload must
    be aligned to sector size, the helper function ``nvm_buf_alloc`` is
    provided for convenience

Read
----

Reads have fewer constraints than writes. The granularity of a read is a single
sector (the smallest addressable unit) and can be performed non-contiguously.

The primary constraint for a read to adhere to is that the block which is read
from must be closed. That is, all pages within the block must have been
written. It might be that the constraint can be relaxed where only N pages
ahead of the read must have been written instead of all pages in the block. The
challenge with relaxing the constraint is that N is often an unknown size.

We have so far written a total of nine pages (across two planes), the first
page in one command, the remaining eight pages in a second command. Thus we
have 503 pages that need to be written before we can start reading.

Specifying the 503 x nplanes x nsectors = 4024 addresses via the CLI is
tedious, we will therefore take a sneak peak at virtual blocks and execute::

  nvm_vblk line_erase /dev/nvme0n1 0 0 0 0 10
  nvm_vblk line_write /dev/nvme0n1 0 0 0 0 10

What these two commands actually do will be described in the following section
on virtual blocks. For now all we need to know is that the block is now fully
written / closed and we can start reading from it.

.. NOTE :: C API for performing write using vectorized IO with addressing at
  sector-level is done using ``nvm_addr_read``, the received payload must be
  stored in a sector-aligned buffer, the helper function ``nvm_buf_alloc`` is
  provided for convenience

Minimal Read
~~~~~~~~~~~~

We can read a single sector::

  nvm_addr read /dev/nvme0n1 0x000000000000000a

Yielding::

  ** nvm_addr_read(...) : pmode(0x1)
  (0x000000000000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(0) }

Setting the environment var ``NVM_CLI_BUF_PR``, will dump the read payload to
stdout, yielding::

  ** nvm_addr_read(...) : pmode(0x1)
  (0x000000000000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(0) }
  ** Read buffer:
  ** NVM_BUF_PR - BEGIN **
  i[0,31]:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
  i[32,63]:  G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
  i[64,95]:  M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
  i[96,127]:  S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
  i[128,159]:  Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
  i[160,191]:  E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
  i[192,223]:  K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
  i[224,255]:  Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
  i[256,287]:  W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
  i[288,319]:  C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
  i[320,351]:  I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
  i[352,383]:  O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T
  i[384,415]:  U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  i[416,447]:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
  i[448,479]:  G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
  i[480,511]:  M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
  i[512,543]:  S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
  i[544,575]:  Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
  i[576,607]:  E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
  i[608,639]:  K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
  i[640,671]:  Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
  i[672,703]:  W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
  i[704,735]:  C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
  i[736,767]:  I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
  i[768,799]:  O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T
  i[800,831]:  U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  i[832,863]:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
  i[864,895]:  G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
  i[896,927]:  M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
  i[928,959]:  S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
  i[960,991]:  Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
  i[992,1023]:  E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
  i[1024,1055]:  K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
  i[1056,1087]:  Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
  i[1088,1119]:  W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
  i[1120,1151]:  C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
  i[1152,1183]:  I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
  i[1184,1215]:  O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T
  i[1216,1247]:  U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  i[1248,1279]:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
  i[1280,1311]:  G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
  i[1312,1343]:  M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
  i[1344,1375]:  S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
  i[1376,1407]:  Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
  i[1408,1439]:  E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
  i[1440,1471]:  K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
  i[1472,1503]:  Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
  i[1504,1535]:  W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
  i[1536,1567]:  C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
  i[1568,1599]:  I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
  i[1600,1631]:  O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T
  i[1632,1663]:  U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  i[1664,1695]:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
  i[1696,1727]:  G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
  i[1728,1759]:  M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
  i[1760,1791]:  S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
  i[1792,1823]:  Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
  i[1824,1855]:  E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
  i[1856,1887]:  K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
  i[1888,1919]:  Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
  i[1920,1951]:  W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
  i[1952,1983]:  C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
  i[1984,2015]:  I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
  i[2016,2047]:  O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T
  i[2048,2079]:  U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  i[2080,2111]:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
  i[2112,2143]:  G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
  i[2144,2175]:  M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
  i[2176,2207]:  S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
  i[2208,2239]:  Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
  i[2240,2271]:  E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
  i[2272,2303]:  K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
  i[2304,2335]:  Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
  i[2336,2367]:  W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
  i[2368,2399]:  C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
  i[2400,2431]:  I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
  i[2432,2463]:  O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T
  i[2464,2495]:  U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  i[2496,2527]:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
  i[2528,2559]:  G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
  i[2560,2591]:  M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
  i[2592,2623]:  S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
  i[2624,2655]:  Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
  i[2656,2687]:  E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
  i[2688,2719]:  K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
  i[2720,2751]:  Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
  i[2752,2783]:  W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
  i[2784,2815]:  C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
  i[2816,2847]:  I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
  i[2848,2879]:  O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T
  i[2880,2911]:  U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  i[2912,2943]:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
  i[2944,2975]:  G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
  i[2976,3007]:  M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
  i[3008,3039]:  S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
  i[3040,3071]:  Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
  i[3072,3103]:  E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
  i[3104,3135]:  K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
  i[3136,3167]:  Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
  i[3168,3199]:  W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
  i[3200,3231]:  C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
  i[3232,3263]:  I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
  i[3264,3295]:  O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T
  i[3296,3327]:  U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  i[3328,3359]:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
  i[3360,3391]:  G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
  i[3392,3423]:  M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
  i[3424,3455]:  S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
  i[3456,3487]:  Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
  i[3488,3519]:  E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
  i[3520,3551]:  K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
  i[3552,3583]:  Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
  i[3584,3615]:  W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
  i[3616,3647]:  C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
  i[3648,3679]:  I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
  i[3680,3711]:  O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T
  i[3712,3743]:  U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  i[3744,3775]:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F
  i[3776,3807]:  G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L
  i[3808,3839]:  M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R
  i[3840,3871]:  S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
  i[3872,3903]:  Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
  i[3904,3935]:  E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J
  i[3936,3967]:  K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N O P
  i[3968,3999]:  Q R S T U V W X Y Z A B C D E F G H I J K L M N O P Q R S T U V
  i[4000,4031]:  W X Y Z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
  i[4032,4063]:  C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F G H
  i[4064,4095]:  I J K L M N O P Q R S T U V W X Y Z A B C D E F G H I J K L M N
  ** NVM_BUF_PR - END **

Maximum Read
~~~~~~~~~~~~

Same as a write, a read has an upper bound on the number of addresses in a
single command::

  nvm_addr read /dev/nvme0n1 \
  0x000000000000000a 0x000000010000000a 0x000000020000000a 0x000000030000000a \
  0x000001000000000a 0x000001010000000a 0x000001020000000a 0x000001030000000a \
  0x000000000001000a 0x000000010001000a 0x000000020001000a 0x000000030001000a \
  0x000001000001000a 0x000001010001000a 0x000001020001000a 0x000001030001000a \
  0x000000000002000a 0x000000010002000a 0x000000020002000a 0x000000030002000a \
  0x000001000002000a 0x000001010002000a 0x000001020002000a 0x000001030002000a \
  0x000000000003000a 0x000000010003000a 0x000000020003000a 0x000000030003000a \
  0x000001000003000a 0x000001010003000a 0x000001020003000a 0x000001030003000a \
  0x000000000004000a 0x000000010004000a 0x000000020004000a 0x000000030004000a \
  0x000001000004000a 0x000001010004000a 0x000001020004000a 0x000001030004000a \
  0x000000000005000a 0x000000010005000a 0x000000020005000a 0x000000030005000a \
  0x000001000005000a 0x000001010005000a 0x000001020005000a 0x000001030005000a \
  0x000000000006000a 0x000000010006000a 0x000000020006000a 0x000000030006000a \
  0x000001000006000a 0x000001010006000a 0x000001020006000a 0x000001030006000a \
  0x000000000007000a 0x000000010007000a 0x000000020007000a 0x000000030007000a \
  0x000001000007000a 0x000001010007000a 0x000001020007000a 0x000001030007000a

Yielding::

  ** nvm_addr_read(...) : pmode(0x1)
  (0x000000000000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(0) }
  (0x000000010000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(1) }
  (0x000000020000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(2) }
  (0x000000030000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(3) }
  (0x000001000000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(0) }
  (0x000001010000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(1) }
  (0x000001020000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(2) }
  (0x000001030000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(3) }
  (0x000000000001000a){ ch(00), lun(00), pl(0), blk(0010), pg(001), sec(0) }
  (0x000000010001000a){ ch(00), lun(00), pl(0), blk(0010), pg(001), sec(1) }
  (0x000000020001000a){ ch(00), lun(00), pl(0), blk(0010), pg(001), sec(2) }
  (0x000000030001000a){ ch(00), lun(00), pl(0), blk(0010), pg(001), sec(3) }
  (0x000001000001000a){ ch(00), lun(00), pl(1), blk(0010), pg(001), sec(0) }
  (0x000001010001000a){ ch(00), lun(00), pl(1), blk(0010), pg(001), sec(1) }
  (0x000001020001000a){ ch(00), lun(00), pl(1), blk(0010), pg(001), sec(2) }
  (0x000001030001000a){ ch(00), lun(00), pl(1), blk(0010), pg(001), sec(3) }
               ... output for pages 3-7 omitted for brevity ...
  (0x000000000007000a){ ch(00), lun(00), pl(0), blk(0010), pg(007), sec(0) }
  (0x000000010007000a){ ch(00), lun(00), pl(0), blk(0010), pg(007), sec(1) }
  (0x000000020007000a){ ch(00), lun(00), pl(0), blk(0010), pg(007), sec(2) }
  (0x000000030007000a){ ch(00), lun(00), pl(0), blk(0010), pg(007), sec(3) }
  (0x000001000007000a){ ch(00), lun(00), pl(1), blk(0010), pg(007), sec(0) }
  (0x000001010007000a){ ch(00), lun(00), pl(1), blk(0010), pg(007), sec(1) }
  (0x000001020007000a){ ch(00), lun(00), pl(1), blk(0010), pg(007), sec(2) }
  (0x000001030007000a){ ch(00), lun(00), pl(1), blk(0010), pg(007), sec(3) }

Non-Contiguous Read
~~~~~~~~~~~~~~~~~~~

Reading pages 500, 200, 0, and 6 across planes::

  nvm_addr read /dev/nvme0n1 \
  0x0000000001f4000a 0x0000000101f4000a 0x0000000201f4000a 0x0000000301f4000a \
  0x0000010001f4000a 0x0000010101f4000a 0x0000010201f4000a 0x0000010301f4000a \
  0x0000000000c8000a 0x0000000100c8000a 0x0000000200c8000a 0x0000000300c8000a \
  0x0000010000c8000a 0x0000010100c8000a 0x0000010200c8000a 0x0000010300c8000a \
  0x000000000000000a 0x000000010000000a 0x000000020000000a 0x000000030000000a \
  0x000001000000000a 0x000001010000000a 0x000001020000000a 0x000001030000000a \
  0x000000000006000a 0x000000010006000a 0x000000020006000a 0x000000030006000a \
  0x000001000006000a 0x000001010006000a 0x000001020006000a 0x000001030006000a

Successfully yielding::

  ** nvm_addr_read(...) : pmode(0x1)
  (0x0000000001f4000a){ ch(00), lun(00), pl(0), blk(0010), pg(500), sec(0) }
  (0x0000000101f4000a){ ch(00), lun(00), pl(0), blk(0010), pg(500), sec(1) }
  (0x0000000201f4000a){ ch(00), lun(00), pl(0), blk(0010), pg(500), sec(2) }
  (0x0000000301f4000a){ ch(00), lun(00), pl(0), blk(0010), pg(500), sec(3) }
  (0x0000010001f4000a){ ch(00), lun(00), pl(1), blk(0010), pg(500), sec(0) }
  (0x0000010101f4000a){ ch(00), lun(00), pl(1), blk(0010), pg(500), sec(1) }
  (0x0000010201f4000a){ ch(00), lun(00), pl(1), blk(0010), pg(500), sec(2) }
  (0x0000010301f4000a){ ch(00), lun(00), pl(1), blk(0010), pg(500), sec(3) }
  (0x0000000000c8000a){ ch(00), lun(00), pl(0), blk(0010), pg(200), sec(0) }
  (0x0000000100c8000a){ ch(00), lun(00), pl(0), blk(0010), pg(200), sec(1) }
  (0x0000000200c8000a){ ch(00), lun(00), pl(0), blk(0010), pg(200), sec(2) }
  (0x0000000300c8000a){ ch(00), lun(00), pl(0), blk(0010), pg(200), sec(3) }
  (0x0000010000c8000a){ ch(00), lun(00), pl(1), blk(0010), pg(200), sec(0) }
  (0x0000010100c8000a){ ch(00), lun(00), pl(1), blk(0010), pg(200), sec(1) }
  (0x0000010200c8000a){ ch(00), lun(00), pl(1), blk(0010), pg(200), sec(2) }
  (0x0000010300c8000a){ ch(00), lun(00), pl(1), blk(0010), pg(200), sec(3) }
  (0x000000000000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(0) }
  (0x000000010000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(1) }
  (0x000000020000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(2) }
  (0x000000030000000a){ ch(00), lun(00), pl(0), blk(0010), pg(000), sec(3) }
  (0x000001000000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(0) }
  (0x000001010000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(1) }
  (0x000001020000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(2) }
  (0x000001030000000a){ ch(00), lun(00), pl(1), blk(0010), pg(000), sec(3) }
  (0x000000000006000a){ ch(00), lun(00), pl(0), blk(0010), pg(006), sec(0) }
  (0x000000010006000a){ ch(00), lun(00), pl(0), blk(0010), pg(006), sec(1) }
  (0x000000020006000a){ ch(00), lun(00), pl(0), blk(0010), pg(006), sec(2) }
  (0x000000030006000a){ ch(00), lun(00), pl(0), blk(0010), pg(006), sec(3) }
  (0x000001000006000a){ ch(00), lun(00), pl(1), blk(0010), pg(006), sec(0) }
  (0x000001010006000a){ ch(00), lun(00), pl(1), blk(0010), pg(006), sec(1) }
  (0x000001020006000a){ ch(00), lun(00), pl(1), blk(0010), pg(006), sec(2) }
  (0x000001030006000a){ ch(00), lun(00), pl(1), blk(0010), pg(006), sec(3) }

It is worth mentioning that the vectorized reads can be non-contiguous not only
within a block but also scattered accross different different blocks, in
different LUNs, and channels.

However, when using plane-mode ensure that addresses are constructed across
planes and all sectors are read as in the example above.

Virtual Block
=============

TODO

Bad-Block-Table
===============

TODO

